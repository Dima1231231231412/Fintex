plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.4'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'org.springdoc.openapi-gradle-plugin' version "1.7.0"
	id 'org.liquibase.gradle' version '2.2.0'
}
compileJava.options.encoding = 'UTF-8'
group = 'com.example'
version = '0.0.1-SNAPSHOT'
java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'junit:junit:4.13.1'
	implementation 'org.projectlombok:lombok:1.18.20'
	annotationProcessor 'org.projectlombok:lombok:1.18.26'
	implementation 'com.google.code.gson:gson:2.10.1'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.4'
	implementation 'org.json:json:20171018'
	annotationProcessor 'com.vmware.test-operations:test-operations:1.1.0'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation "io.github.resilience4j:resilience4j-all:2.0.2"
	runtimeOnly('com.h2database:h2:2.1.214')
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation ("org.liquibase:liquibase-core")
	testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.7.3'
	testImplementation "org.testcontainers:junit-jupiter:1.17.6"
	implementation("org.liquibase:liquibase-core")
}

tasks.named('test') {
	useJUnitPlatform()
}



jar {
	//noinspection GroovyAssignabilityCheck
	manifest {
		attributes 'Main-Class': 'Main'
	}

}


task run(type: JavaExec) {
	main = 'com.example.springapp.FintechSpringBootApplication'
	classpath = sourceSets.main.runtimeClasspath
}
task fatJar(type: Jar) {
	//noinspection GroovyAssignabilityCheck
	manifest {
		attributes 'Main-Class': 'Main'
	}

	archiveClassifier = "all"
	from {
		configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	}
	with jar
}
